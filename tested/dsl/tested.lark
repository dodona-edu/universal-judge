%import common.CNAME
%import common.ESCAPED_STRING
%import common.SIGNED_INT
%import common.SIGNED_FLOAT
%import common.WS
%ignore WS

INTEGER: "integer"
RATIONAL: "rational"
CHAR: "char"
TEXT: "text"
BOOLEAN: "boolean"
SEQUENCE: "sequence"
SET: "set"
MAP: "map"
NOTHING: "nothing"
ANY: "any"
INT_8: "int8"
U_INT_8: "uint8"
INT_16: "int16"
U_INT_16: "uint16"
INT_32: "int32"
U_INT_32: "uint32"
INT_64: "int64"
U_INT_64: "uint64"
BIG_INT: "bigint"
SINGLE_PRECISION: "single"
DOUBLE_PRECISION: "double"
DOUBLE_EXTENDED: "extended"
FIXED_PRECISION: "fixed"
ARRAY: "array"
LIST: "list"
NULL: "null"
UNDEFINED: "undefined"
TRUE: "true"
FALSE: "false"

?collections: SEQUENCE
            | SET
            | ARRAY
            | LIST

?datatype: INTEGER
        | RATIONAL
        | CHAR
        | TEXT
        | BOOLEAN
        | MAP
        | NOTHING
        | ANY
        | INT_8
        | U_INT_8
        | INT_16
        | U_INT_16
        | INT_32
        | U_INT_32
        | INT_64
        | U_INT_64
        | BIG_INT
        | SINGLE_PRECISION
        | DOUBLE_PRECISION
        | DOUBLE_EXTENDED
        | FIXED_PRECISION
        | collections

?assign_datatype: datatype
                | CNAME

?null: NULL
    | UNDEFINED

?boolean: TRUE
        | FALSE

?string: ESCAPED_STRING

dict: "{" [dict_pair ("," dict_pair)*] "}"
list: "[" args "]"
set: "{" expression ("," expression)* "}"
tuple: "("args ")"
dict_pair: expression ":" expression

?value_raw: SIGNED_FLOAT
      | SIGNED_INT
      | boolean
      | dict
      | set
      | list
      | tuple
      | string
      | null

value_cast: value_raw "::" datatype

?value: value_raw
    | value_cast

?return: value

_property: "." CNAME

?internal_expression: "(" expression ")"
    | function
    | property
    | value_raw
    | variable
    | global_variable

property: internal_expression _property


args: [expression ("," expression)*]
?arguments: "(" args ")"
global_variable: "<" CNAME ">"
?variable: CNAME
?name: CNAME
    | property

function: name arguments
function_reference: [internal_expression] "::" CNAME
constructor: "new" function

NEW_REF: /::\s*new/
constructor_reference: [internal_expression "."] CNAME NEW_REF

// Lambda's
typed_lambda_parameter: assign_datatype CNAME
typed_lambda_parameters: "(" typed_lambda_parameter ("," typed_lambda_parameter )* ")"
untyped_lambda_parameters: CNAME
    | "(" [CNAME ("," CNAME)*] ")"
?lambda_parameters: typed_lambda_parameters
    | untyped_lambda_parameters

lambda: lambda_parameters "->" expression

?expression: "(" expression ")"
    | global_variable
    | variable
    | value
    | property
    | function
    | function_reference
    | constructor
    | constructor_reference
    | lambda

assignment: assign_datatype? CNAME "=" expression

?statements: expression
    | assignment
